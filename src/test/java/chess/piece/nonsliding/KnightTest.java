package chess.piece.nonsliding;

import static chess.PositionFixtures.B2;
import static chess.PositionFixtures.B3;
import static chess.PositionFixtures.B4;
import static chess.PositionFixtures.C1;
import static chess.PositionFixtures.C2;
import static chess.PositionFixtures.C5;
import static chess.PositionFixtures.E1;
import static chess.PositionFixtures.E5;
import static chess.PositionFixtures.F2;
import static chess.PositionFixtures.F4;
import static chess.piece.PiecesFixtures.KNIGHT_BLACK_C2;
import static chess.piece.PiecesFixtures.KNIGHT_WHITE_A1;
import static chess.piece.PiecesFixtures.KNIGHT_WHITE_A2;
import static chess.piece.PiecesFixtures.KNIGHT_WHITE_B3;
import static chess.piece.PiecesFixtures.KNIGHT_WHITE_C3;
import static chess.piece.PiecesFixtures.KNIGHT_WHITE_D3;
import static org.assertj.core.api.Assertions.assertThat;
import static org.assertj.core.api.Assertions.assertThatThrownBy;

import java.util.Set;
import org.junit.jupiter.api.Test;

class KnightTest {

    /*
    ........
    ........
    ........
    ........
    ........
    .*......
    ..N.....
    n.......
     */
    @Test
    void legalMovePositions_a1() {
        final var movablePositions = KNIGHT_WHITE_A1.legalMovePositions(Set.of(
                KNIGHT_WHITE_A1,
                KNIGHT_BLACK_C2
        ));

        assertThat(movablePositions).containsOnly(B3, C2);
    }

    /*
    ........
    ........
    ........
    ........
    .*......
    ..n.....
    n.......
    ..*.....
     */
    @Test
    void legalMovePositions_a2() {
        final var movablePositions = KNIGHT_WHITE_A2.legalMovePositions(Set.of(
                KNIGHT_WHITE_A2,
                KNIGHT_WHITE_C3
        ));

        assertThat(movablePositions).containsOnly(B4, C1);
    }

    /*
    ........
    ........
    ........
    ..*.*...
    .*...*..
    ...n....
    .*...*..
    ..*.*...
     */
    @Test
    void legalMovePositions_d3() {
        final var movablePositions = KNIGHT_WHITE_D3.legalMovePositions(Set.of(
                KNIGHT_WHITE_D3
        ));

        assertThat(movablePositions).containsOnly(B2, B4, C1, C5, E1, E5, F2, F4);
    }

    /*
    ........
    ........
    ........
    ........
    ........
    .N......
    ........
    n.......

    ........
    ........
    ........
    ........
    ........
    .n......
    ........
    ........
     */
    @Test
    void move_otherColor() {
        final var moved = KNIGHT_WHITE_A1.move(B3, Set.of(
                KNIGHT_WHITE_A1
        ));

        assertThat(moved).isEqualTo(KNIGHT_WHITE_B3);
    }

    /*
    ........
    ........
    ........
    ........
    ........
    .N......
    ........
    n.......
     */
    @Test
    void move_sameColor() {
        assertThatThrownBy(() -> {
            KNIGHT_WHITE_A1.move(B3, Set.of(
                    KNIGHT_WHITE_A1,
                    KNIGHT_WHITE_B3
            ));
        });
    }
}
