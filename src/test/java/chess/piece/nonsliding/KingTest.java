package chess.piece.nonsliding;

import static chess.PositionFixtures.A1;
import static chess.PositionFixtures.A2;
import static chess.PositionFixtures.A7;
import static chess.PositionFixtures.B1;
import static chess.PositionFixtures.B2;
import static chess.PositionFixtures.B3;
import static chess.PositionFixtures.B4;
import static chess.PositionFixtures.B7;
import static chess.PositionFixtures.B8;
import static chess.PositionFixtures.C2;
import static chess.PositionFixtures.C4;
import static chess.PositionFixtures.D2;
import static chess.PositionFixtures.D3;
import static chess.PositionFixtures.D4;
import static chess.PositionFixtures.G1;
import static chess.PositionFixtures.G2;
import static chess.PositionFixtures.G7;
import static chess.PositionFixtures.G8;
import static chess.PositionFixtures.H2;
import static chess.PositionFixtures.H7;
import static chess.piece.PiecesFixtures.KING_BLACK_B1;
import static chess.piece.PiecesFixtures.KING_WHITE_A1;
import static chess.piece.PiecesFixtures.KING_WHITE_A2;
import static chess.piece.PiecesFixtures.KING_WHITE_A8;
import static chess.piece.PiecesFixtures.KING_WHITE_B2;
import static chess.piece.PiecesFixtures.KING_WHITE_C3;
import static chess.piece.PiecesFixtures.KING_WHITE_H1;
import static chess.piece.PiecesFixtures.KING_WHITE_H8;
import static chess.piece.PiecesFixtures.ROOK_WHITE_A3;
import static chess.piece.PiecesFixtures.ROOK_WHITE_B2;
import static org.assertj.core.api.Assertions.assertThat;
import static org.assertj.core.api.Assertions.assertThatThrownBy;

import java.util.Set;
import org.junit.jupiter.api.Test;

class KingTest {

    /*
    ........
    ........
    ........
    ........
    ........
    ........
    *K......
    k*......
     */
    @Test
    void legalMovePositions_a1() {
        final var movablePositions = KING_WHITE_A1.legalMovePositions(Set.of(
                KING_WHITE_A1,
                KING_BLACK_B1
        ));

        assertThat(movablePositions).containsOnly(A2, B1, B2);
    }

    /*
    ........
    ........
    ........
    ........
    ........
    r*......
    k*......
    *K......
     */
    @Test
    void legalMovePositions_a2() {
        final var movablePositions = KING_WHITE_A2.legalMovePositions(Set.of(
                KING_WHITE_A2,
                ROOK_WHITE_A3,
                KING_BLACK_B1
        ));

        assertThat(movablePositions).containsOnly(A1, B1, B2, B3);
    }

    /*
    k*......
    **......
    ........
    ........
    ........
    ........
    ........
    ........
     */
    @Test
    void legalMovePositions_a8() {
        final var movablePositions = KING_WHITE_A8.legalMovePositions(Set.of(
                KING_WHITE_A8
        ));

        assertThat(movablePositions).containsOnly(A7, B7, B8);
    }

    /*
    ......*k
    ......**
    ........
    ........
    ........
    ........
    ........
    ........
     */
    @Test
    void legalMovePositions_h8() {
        final var movablePositions = KING_WHITE_H8.legalMovePositions(Set.of(
                KING_WHITE_H8
        ));

        assertThat(movablePositions).containsOnly(H7, G7, G8);
    }

    /*
    ........
    ........
    ........
    ........
    ........
    ........
    ......**
    ......*k
     */
    @Test
    void legalMovePositions_h1() {
        final var movablePositions = KING_WHITE_H1.legalMovePositions(Set.of(
                KING_WHITE_H1
        ));

        assertThat(movablePositions).containsOnly(H2, G1, G2);
    }

    /*
    ........
    ........
    ........
    ........
    .***....
    .*k*....
    .***....
    ........
     */
    @Test
    void legalMovePositions_c3() {
        final var movablePositions = KING_WHITE_C3.legalMovePositions(Set.of(
                KING_WHITE_C3
        ));

        assertThat(movablePositions).containsOnly(B2, B3, B4, C2, C4, D2, D3, D4);
    }

    /*
    ........
    ........
    ........
    ........
    ........
    ........
    .K......
    k.......

    ........
    ........
    ........
    ........
    ........
    ........
    .k......
    ........
     */
    @Test
    void move_otherColor() {
        final var moved = KING_WHITE_A1.move(B2, Set.of(
                KING_WHITE_A1
        ));

        assertThat(moved).isEqualTo(KING_WHITE_B2);
    }

    /*
    ........
    ........
    ........
    ........
    ........
    ........
    .r......
    k.......
     */
    @Test
    void move_sameColor() {
        assertThatThrownBy(() -> {
            KING_WHITE_A1.move(B2, Set.of(
                    KING_WHITE_A1,
                    ROOK_WHITE_B2
            ));
        });
    }
}
